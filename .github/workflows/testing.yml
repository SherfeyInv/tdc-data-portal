name: Build and Test
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  buildandtest:
    name: Build and Scan Image with Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Add CKAN url to hosts
        run: sudo echo "127.0.0.1 ckan-dev" | sudo tee -a /etc/hosts
      - name: Add Minio url to hosts
        run: sudo echo "127.0.0.1 minio" | sudo tee -a /etc/hosts
      - name: Copy .env.example into .env
        run: cp .env.example .env
      - name: Install `Xvfb` and others to run browsers for end-to-end testing in local CI/CD simulations
        if: ${{ env.ACT }}
        run: sudo apt-get update && sudo apt-get install -y xvfb && npx playwright install-deps
      - name: Set up Docker Containers
        run: |
          NGINX_CONTAINER_NAME=nginx \
          REDIS_CONTAINER_NAME=redis \
          POSTGRESQL_CONTAINER_NAME=db \
          SOLR_CONTAINER_NAME=solr \
          DATAPUSHER_CONTAINER_NAME=datapusher \
          CKAN_CONTAINER_NAME=ckan \
          WORKER_CONTAINER_NAME=ckan-worker \
          CKAN_PORT_HOST=5000 \
          NGINX_PORT_HOST=81 \
          NGINX_SSLPORT_HOST=8443 \
          POSTGRES_USER=postgres \
          POSTGRES_PASSWORD=postgres \
          POSTGRES_DB=postgres \
          CKANEXT__TDC__CLIENT_AUTH_SECRET=1234567 \
          POSTGRES_HOST=db \
          CKAN_DB_USER=ckandbuser \
          CKAN_DB_PASSWORD=ckandbpassword \
          CKAN_DB=ckandb \
          DATASTORE_READONLY_USER=datastore_ro \
          DATASTORE_READONLY_PASSWORD=datastore \
          DATASTORE_DB=datastore \
          CKAN__DATASTORE__SQLSEARCH__ENABLED=True \
          CKAN_SQLALCHEMY_URL=postgresql://ckandbuser:ckandbpassword@db/ckandb \
          CKAN_DATASTORE_WRITE_URL=postgresql://ckandbuser:ckandbpassword@db/datastore \
          CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:datastore@db/datastore \
          TEST_CKAN_SQLALCHEMY_URL=postgres://ckan:ckan@db/ckan_test \
          TEST_CKAN_DATASTORE_WRITE_URL=postgresql://ckan:ckan@db/datastore_test \ 
          TEST_CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:datastore@db/datastore_test \
          USE_HTTPS_FOR_DEV=false \
          CKAN_VERSION=2.10.0 \
          CKAN_SITE_ID=default \
          CKAN_SITE_URL=http://ckan-dev:5000 \
          CKAN_PORT=5000 \
          CKAN_PORT_HOST=5000 \
          CKAN___BEAKER__SESSION__SECRET=CHANGE_ME \
          CKAN___API_TOKEN__JWT__ENCODE__SECRET=string:CHANGE_ME \
          CKAN___API_TOKEN__JWT__DECODE__SECRET=string:CHANGE_ME \
          CKAN_SYSADMIN_NAME=ckan_admin \
          CKAN_SYSADMIN_PASSWORD=test1234 \
          CKAN_SYSADMIN_EMAIL=your_email@example.com \
          CKAN_STORAGE_PATH=/var/lib/ckan \
          CKAN_SMTP_SERVER=smtp.corporateict.domain:25 \
          CKAN_SMTP_STARTTLS=True \
          CKAN_SMTP_USER=user \
          CKAN_SMTP_PASSWORD=pass \
          CKAN_SMTP_MAIL_FROM=ckan@localhost \
          TZ=UTC \
          CKAN__CORS__ORIGIN_ALLOW_ALL=True \
          CKAN__DATASTORE__SQLSEARCH__ENABLED=True \
          SOLR_IMAGE_VERSION=2.10-solr9 \
          CKAN_SOLR_URL=http://solr:8983/solr/ckan \
          TEST_CKAN_SOLR_URL=http://solr:8983/solr/ckan \
          REDIS_VERSION=6 \
          CKAN_REDIS_URL=redis://redis:6379/1 \
          TEST_CKAN_REDIS_URL=redis://redis:6379/1 \
          DATAPUSHER_VERSION=0.0.20 \
          CKAN_DATAPUSHER_URL=http://datapusher:8800 \
          CKAN__DATAPUSHER__CALLBACK_URL_BASE=http://ckan-dev:5000 \
          DATAPUSHER_REWRITE_RESOURCES=True \
          DATAPUSHER_REWRITE_URL=http://ckan-dev:5000 \
          CKAN__FRONTEND_PORTAL_URL=http://127.0.0.1:3000 \
          NGINX_PORT=80 \
          NGINX_SSLPORT=443 \
          MINIO_ROOT_USER=minioadmin \
          MINIO_ROOT_PASSWORD=minioadmin \ 
          CKANEXT__S3FILESTORE__AWS_BUCKET_NAME=ckan \
          CKANEXT__S3FILESTORE__REGION_NAME=us-east-1 \
          CKANEXT__S3FILESTORE__SIGNATURE_VERSION=s3v4 \
          CKANEXT__S3FILESTORE__AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER} \
          CKANEXT__S3FILESTORE__AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD} \
          CKANEXT__S3FILESTORE__HOST_NAME=http://minio:9000 \
          CKANEXT__AUTH__INCLUDE_FRONTEND_LOGIN_TOKEN=True \
          CKAN__HARVEST__MQ__TYPE=redis \
          CKAN__HARVEST__MQ__HOSTNAME=redis \
          CKAN__HARVEST__MQ__PORT=6379 \
          CKAN__HARVEST__MQ__REDIS_DB=1 \
          CKAN___SCHEMING__DATASET_SCHEMAS=ckanext.tdc:schemas/dataset.yaml \
          CKAN___SCHEMING__GROUP_SCHEMAS="ckanext.tdc:schemas/topic.yaml ckanext.tdc:schemas/geography.yaml" \
          CKAN___SCHEMING__ORGANIZATION_SCHEMAS="ckanext.tdc:schemas/organization.yaml" \
          CKAN___SCHEMING__PRESETS="ckanext.tdc:schemas/presets.yaml" \
          CKAN__DEFAULT__GROUP_TYPE=topic
          CKAN__PLUGINS="tdc hierarchy_display scheming_datasets scheming_groups scheming_organizations dcat envvars image_view text_view activity s3filestore datastore datapusher resource_proxy" \
          CKAN__AUTH__USER_CREATE_GROUPS="False" \
          CKAN__AUTH__USER_CREATE_ORGANIZATIONS="False" \
          CKAN__AUTH__USER_DELETE_GROUPS="False" \
          CKAN__AUTH__USER_DELETE_ORGANIZATIONS="False" \
          CKAN__GROUP_AND_ORGANIZATIONS_LIST_ALL_FIELDS_MAX="250" \
          CKAN_SMTP_SERVER={{secrets.CKAN_SMTP_SERVER}} \
          CKAN_SMTP_USER={{secrets.CKAN_SMTP_USER}} \ 
          CKAN_SMTP_PASSWORD={{secrets.CKAN_SMTP_PASSWORD}} \ 
          CKAN_SMTP_MAIL_FROM={{secrets.CKAN_SMTP_MAIL_FROM}} \
          docker compose -f docker-compose.dev.yml up --build -d
      - name: Create sysadmin API for Authorization
        run: bash ./scripts/cypress_setup.sh
      - name: Print Logs
        run: docker compose -f docker-compose.dev.yml --env-file .env.example logs
        continue-on-error: true
      - name: Wait for ckan-tdc-dev to be healthy
        run: |
          echo "Waiting for ckan-tdc-dev to become healthy"
          for i in {1..60}; do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' ckan-tdc-dev)
            if [ "$health_status" == "healthy" ]; then
              echo "ckan-tdc-dev is healthy"
              break
            elif [ "$health_status" == "unhealthy" ]; then
              echo "ckan-tdc-dev is unhealthy, printing logs"
              docker compose -f docker-compose.dev.yml logs ckan-tdc-dev
              exit 1
            else
              echo "Current health status: $health_status"
            fi
            sleep 5
          done
          if [ "$health_status" != "healthy" ]; then
            echo "ckan-tdc-dev did not become healthy in time"
            docker compose -f docker-compose.dev.yml logs ckan-tdc-dev
            exit 1
          fi
      - name: Wait for ckan-tdc-db to be healthy
        run: |
          while ! docker exec ckan-tdc-db pg_isready -U ckandbuser -d ckandb; do
            sleep 1
          done
      - name: Run seeding geographies
        run: docker exec ckan-tdc-dev sh -c "ckan -c ckan.ini create-default-geographies"
      - name: Copy .env
        run: cp .env.example .env
        working-directory: ./frontend
      - name: Run frontend tests ðŸ§ª
        uses: cypress-io/github-action@v6
        with:
          install-command: npm install
          build: npm run build
          start: npm run start
          wait-on: 'http://127.0.0.1:3000'
          wait-on-timeout: 600
          command: npm run test
          working-directory: ./frontend
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/ckan-docker-tdc-dev/ckan-docker-tdc-dev/integration-tests/cypress/screenshots
          if-no-files-found: ignore
      - name: Print Error Logs
        if: failure()
        run: docker compose -f docker-compose.dev.yml --env-file .env.example logs
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Frontend screenshots
          path: ./frontend/cypress/screenshots
          if-no-files-found: ignore
      - name: Tear down containers
        if: failure() || success()
        run: docker compose -f docker-compose.dev.yml --env-file .env.example down -v --remove-orphans
