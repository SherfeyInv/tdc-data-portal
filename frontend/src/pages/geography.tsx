import Head from "next/head";
import Layout from "../components/_shared/Layout";
import { Badge } from "@components/ui/badge";
import listOfCountries from "@lib/listOfCountries";

export default function DatasetsPage(): JSX.Element {
  const letterMap = new Map<string, string[]>();
  listOfCountries.forEach((country) => {
    let letter = country.name[0]!.toLowerCase();
    if (letter === "Ã…".toLowerCase()) letter = "a";
    const array = letterMap.get(letter);
    if (!array) {
      letterMap.set(letter, [country.name]);
    } else {
      array.push(country.name);
    }
  });

  console.log(
    getColumns(
      Array.from(letterMap.keys()).map((l) => [{ x: l, a: letterMap.get(l) }])
    )
  );

  return (
    <>
      <Head>
        <title>Geography</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout backgroundEffect>
        {/* <div className="container grid grid-cols-6 gap-4"> */}
        <div
          className="container grid  gap-4"
          style={{
            gridTemplateColumns: "repeat(auto-fill, minmax(150px, 1fr));",
          }}
        >
          {Array.from(letterMap.keys()).map((letter) => (
            <LetterCard letter={letter} words={letterMap.get(letter) || []} />
          ))}
        </div>
      </Layout>
    </>
  );
}

const LetterCard = ({ words, letter }: { letter: string; words: string[] }) => (
  <div className="flex h-fit max-h-fit max-w-[200px] grid-rows-1 flex-col gap-5 rounded-lg bg-white p-6 shadow-md xl:w-[200px]">
    <Badge className="h-12 w-12 items-center px-3" variant={"success"}>
      <span className="text-[30px] font-extrabold uppercase">{letter}</span>
    </Badge>
    <div className="flex flex-col gap-3">
      {words.map((word) => (
        <span className="break-words text-[#6B7280]">{word}</span>
      ))}
    </div>
  </div>
);

function getColumns(matrix) {
  // Initialize an empty array to store the column arrays
  const columns = [];

  // Determine the number of columns (length of the first row)
  const numCols = matrix[0].length;

  // Loop over each column index
  for (let colIndex = 0; colIndex < numCols; colIndex++) {
    const column = [];

    // Loop over each row to extract the element at the current column index
    for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {
      column.push(matrix[rowIndex][colIndex]);
    }

    // Add the column array to the columns array
    columns.push(column);
  }

  return columns;
}
